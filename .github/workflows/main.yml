name: Build and and publish gchr.io
on:
  push:
    branches:
      - main
jobs:
  pipeline:
    name: CI and CD Pipeline
    runs-on: ubuntu-latest
    permissions: write-all
    if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.pull_request.title, '[skip ci]') && !contains(github.event.pull_request.title, '[ci skip]')"
    timeout-minutes: 100
    env:
      JAVA_VERSION: 21
      NODE_VERSION: 20.11.1
      NPM_VERSION: 10.2.4
      SPRING_OUTPUT_ANSI_ENABLED: DETECT
      SPRING_JPA_SHOW_SQL: false
      JHI_DISABLE_WEBPACK_LOGS: true
      NG_CLI_ANALYTICS: false
      PROJECT_VERSION: 0.0.1
      IMAGE_NAME: task
      CONTAINER_REGISTRY: ghcr.io
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.18.2
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 21

      - name: change mvnw permission
        run: chmod +x mvnw

      # Print git and docker tags
      - name: Print Git and Docker tags
        run: |
          GIT_TAG=:${GITHUB_REF#refs/tags/}
          echo "GIT_TAG=$GIT_TAG"
          DOCKER_TAG=${GIT_TAG#:refs/heads/main}
          echo "DOCKER_TAG=$DOCKER_TAG"

      # Set project version for main
      - name: Read property=project.version field in pom.xml with maven and set it to Github Environment
        run: |
          echo "ðŸ”Ž Reading project.version field in pom.xml..."
          echo "PROJECT_VERSION=$(mvn help:evaluate -Dexpression=api-ver -q -DforceStdout)" >> $GITHUB_ENV

      # Print project version
      - name: Print project version
        run: |
          echo "ðŸ”Ž PROJECT_VERSION=${{env.PROJECT_VERSION}}"

      # docker login with Container registry
      - name: Docker login with Container registry
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build java and angular project
      - name: Build docker image with JIB
        run: |
          GIT_TAG=:${GITHUB_REF#refs/tags/}
          echo "GIT_TAG=$GIT_TAG"
          DOCKER_TAG=${GIT_TAG#:refs/heads/main}
          echo "DOCKER_TAG=$DOCKER_TAG"
          echo "ðŸ’¡ NPM install..."
          npm install
          echo "ðŸ’¡ Building docker image with Jib..."
          ./mvnw -ntp -Pdev verify -DskipTests -Drelease.version=${{env.PROJECT_VERSION}} -Djib.to.image=task:latest jib:dockerBuild
          echo "ðŸŽ‰ Docker image is built successfully."
          docker images | grep task

      # Push docker image to Container registry for MAIN branch
      - name: Push docker image to ContainerRegistry for Main branch
        run: |
          GIT_TAG=:${GITHUB_REF#refs/tags/}
          DOCKER_TAG=${GIT_TAG#:refs/heads/main}
          echo "ðŸ’¡ Tagging docker image..."
          docker tag task:latest ghcr.io/cevheri/task:latest
          docker tag task:latest ghcr.io/cevheri/task:${{env.PROJECT_VERSION}}
          echo "ðŸŽ‰ Pushing docker image..."
          docker push ghcr.io/cevheri/task:latest
          docker push ghcr.io/cevheri/task:${{env.PROJECT_VERSION}}

      - name: Login to Docker hub and push the image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ghcr.io -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker tag task:latest ${{ secrets.DOCKER_USERNAME }}/public-api:latest
          docker tag task:latest ${{ secrets.DOCKER_USERNAME }}/public-api:${{env.PROJECT_VERSION}}
          docker push ${{ secrets.DOCKER_USERNAME }}/public-api:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/public-api:${{env.PROJECT_VERSION}}

      - name: Write an approve comment to the PR after the build is successful
        if: github.event_name == 'pull_request' && (github.ref == 'refs/heads/main')
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              body: 'ðŸŽ‰ Build is successful. You can merge this PR now.'
            })

      - name: Approve the PR after the build is successful
        if: github.event_name == 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: APPROVE
            })

      # Create a new Release on GitHub for MAIN branch
      - name: Create a new Release on GitHub
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.PROJECT_VERSION }}
          release_name: v${{ env.PROJECT_VERSION }}
          draft: false
          prerelease: false

      - name: Release ID
        run: echo "ðŸŽ‰ Release id is ${{ steps.create_release.outputs.id }}"
